name: Solution Pipeline

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Branch name to process'
        required: true
        type: string
  push:
    branches:
      - 'solution/**'

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch_name || github.ref }}
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Extract branch name
      run: |
        if [ -n "${{ github.event.inputs.branch_name }}" ]; then
          echo "BRANCH_NAME=${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
        else
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        fi
    
    - name: Validate solution file exists
      run: |
        SOLUTION_FILE=$(find src/main/java/solutions -name "Ticket*Solution.java" | head -1)
        if [ -z "$SOLUTION_FILE" ]; then
          echo "❌ No solution file found"
          exit 1
        fi
        echo "✅ Found solution file: $SOLUTION_FILE"
        echo "SOLUTION_FILE=$SOLUTION_FILE" >> $GITHUB_ENV
    
    - name: Update status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          STATUS="validated"
        else
          STATUS="failed"
        fi
        chmod +x ./scripts/update-status.sh
        ./scripts/update-status.sh "$BRANCH_NAME" "$STATUS"
      env:
        SPRING_APP_URL: ${{ secrets.SPRING_APP_URL }}

  clean-branch:
    needs: validate
    if: success()
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.event.inputs.branch_name || github.ref }}
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract branch name
      run: |
        if [ -n "${{ github.event.inputs.branch_name }}" ]; then
          echo "BRANCH_NAME=${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
        else
          echo "BRANCH_NAME=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
        fi
    
    - name: Push only solution file to branch
      run: |
        # Find the solution file
        SOLUTION_FILE=$(find src/main/java/solutions -name "Ticket*Solution.java" | head -1)
        if [ -z "$SOLUTION_FILE" ]; then
          echo "❌ No solution file found"
          exit 1
        fi
        echo "✅ Found solution file: $SOLUTION_FILE"
        
        # Get the solution file name and content
        SOLUTION_FILENAME=$(basename $SOLUTION_FILE)
        echo "Solution filename: $SOLUTION_FILENAME"
        
        # Create a backup of the solution file
        mkdir -p /tmp/backup
        cp "$SOLUTION_FILE" /tmp/backup/
        ls -la /tmp/backup/
        
        # Configure git with token for authentication
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
        # Set the remote URL with token authentication
        REPO_URL="https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
        git remote set-url origin "$REPO_URL"
        
        # Remove all files from the branch but keep git directory
        find . -not -path "./.git*" -type f -delete
        find . -type d -empty -not -path "./.git*" -delete
        
        # Create solutions directory
        mkdir -p solutions
        
        # Copy the solution file back from backup
        cp /tmp/backup/$SOLUTION_FILENAME solutions/
        
        # Verify the file was copied correctly
        ls -la solutions/
        
        # Add and commit only the solution file
        git add solutions/$SOLUTION_FILENAME
        git add -u  # Stage deleted files
        
        # Commit and push
        git commit -m "Keep only solution file: $SOLUTION_FILENAME"
        git push -f origin $BRANCH_NAME
        
        echo "✅ Pushed only the solution file to branch $BRANCH_NAME"
